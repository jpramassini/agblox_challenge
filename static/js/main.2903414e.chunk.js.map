{"version":3,"sources":["data_sample.csv","components/parameterChooser.js","visualizations/lineGraph.js","components/yearSlider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ParameterChooser","props","console","log","paramNames","listItems","map","name","react_default","a","createElement","style","padding","borderRadius","boxShadow","justifySelf","width","height","textAlign","display","alignItems","justifyContent","fontWeight","key","wordBreak","fontSize","type","value","checked","selectedParams","includes","onChange","onChecked","margin","marginBottom","gridGap","gridTemplateColumns","gridAutoRows","colors","transition","duration","easing","LineGraph","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","layout","xaxis","autoscale","yaxis","fixedrange","title","dataRevision","config","scrollZoom","autoScale","responsive","displaylogo","modeBarButtonsToRemove","data","react_plotly_default","marginTop","marginRight","marginLeft","nextProps","prevState","objectSpread","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","length","concat","err","return","getTitle","plots","_loop","i","paramName","dateRange","timeFilteredData","filter","item","time","min","max","plot","x","y","index","mode","marker","color","monochrome","maxdisplayed","push","computePlots","Component","Range","Slider","createSliderWithTooltip","YearSlider","times","initMinMax","bind","assertThisInitialized","handleChange","getTime","setState","minDate","Date","maxDate","setDateRange","allowCross","tipProps","placement","prefixCls","pushable","tipFormatter","toUTCString","isMobile","window","innerWidth","App","splitData","updateData","handleColorChecked","handleParamChecked","csvFile","require","Papa","parse","header","download","skipEmptyLines","dynamicTyping","complete","keys","shift","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ts","res","parseDate","d3","tsOriginal","setParamNames","speed_mph","event","target","tempArr","splice","indexOf","parseData","changeEvent","entries","className","minWidth","parameterChooser","yearSlider_YearSlider","lineGraph","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2903414e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data_sample.fdd0e8e4.csv\";","import React from \"react\";\n\nconst ParameterChooser = props => {\n  console.log(props);\n  if (props.paramNames) {\n    var counter;\n    const listItems = props.paramNames.map(name => {\n      return (\n        <div\n          style={{\n            padding: \"1%\",\n            borderRadius: \"7px\",\n            boxShadow: \"0 2px 4px 0 rgba(0,0,0,0.10)\",\n            justifySelf: \"center\",\n            width: \"100%\",\n            height: \"100%\",\n            textAlign: \"center\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            fontWeight: \"700\"\n          }}\n          key={name}\n        >\n          <label style={{ wordBreak: \"word-wrap\", fontSize: \"1em\" }}>\n            {name}\n          </label>\n          <input\n            type=\"checkbox\"\n            name={name}\n            value={name}\n            checked={props.selectedParams.includes(name)}\n            onChange={props.onChecked}\n          />\n        </div>\n      );\n    });\n    return (\n      <div\n        style={{\n          height: \"75%\",\n          width: \"85%\",\n          margin: \"auto\",\n          marginBottom: \"5%\",\n          display: \"grid\",\n          gridGap: \"1.5em\",\n          gridTemplateColumns: \"1fr\",\n          gridAutoRows: \"1fr\"\n        }}\n      >\n        {listItems}\n      </div>\n    );\n  } else {\n    return <div />;\n  }\n};\n\nexport default ParameterChooser;\n","import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst colors = [\n  \"#4286f4\", // blue\n  \"#eb6a5b\", // red\n  \"#0ece50\", // green\n  \"#fcea25\", // yellow\n  \"#fc9725\", // orange\n  \"#282c34\", // off - black\n  \"#757171\", // dark grey\n  \"#6316ce\", // indigo\n  \"#e03edb\", // magenta\n  \"#49ccbc\", // aqua\n  \"#1e196d\", // dark blue\n  \"#541525\", // burgundy\n  \"#155430\", // forest green\n  \"#542515\", // brown\n  \"#996f38\" // tan\n];\n\nvar transition = {\n  duration: 250,\n  easing: \"cubic-in-out\"\n};\n\nvar getTitle = selectedParams => {\n  let title = \"\";\n  let count = 0;\n  for (var name of selectedParams) {\n    count++;\n    if (count > 4) {\n      title += \"...\";\n      return title;\n    }\n    if (\n      // if element is the last on in the array, don't add comma.\n      selectedParams[selectedParams.length - 1] === name\n    ) {\n      title += `${name}`;\n    } else {\n      title += `${name}, `;\n    }\n  }\n  console.log(title);\n  return title;\n};\n\nvar computePlots = props => {\n  var plots = [];\n  console.log(props.selectedParams);\n  for (var i = 0; i < props.selectedParams.length; i++) {\n    console.log(i);\n    let paramName = props.selectedParams[i];\n    console.log(typeof paramName);\n    console.log(props.dateRange);\n    let timeFilteredData = props.data[paramName].filter(item => {\n      return item.time > props.dateRange.min && item.time < props.dateRange.max;\n    });\n    console.log(timeFilteredData);\n    let plot = {\n      x: timeFilteredData.map(item => {\n        return item.time;\n      }),\n      y: timeFilteredData.map((item, index) => {\n        if (paramName.includes(\"speed\") && paramName !== \"ref_speed\") {\n          // Making speed values actual speed based on ref_speed.\n          return item.value * props.data[\"ref_speed\"][index].value;\n        } else if (paramName.includes(\"ref_speed\")) {\n          return item.value;\n        } else {\n          return item.value * 100; // Expanding other sets normalized from 0 to 1 to 0 to 100 to better fit graph.\n        }\n      }),\n      name: paramName,\n      mode: \"markers\",\n      marker: {\n        color: props.monochrome ? \"#282c34\" : colors[i],\n        maxdisplayed: 1000\n      }\n    };\n    plots.push(plot);\n  }\n  console.log(plots);\n  return plots;\n};\n\nclass LineGraph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layout: {\n        xaxis: {\n          autoscale: true\n        },\n        yaxis: {\n          fixedrange: true,\n          autoscale: true\n        },\n        transition: transition,\n        title: \"\",\n        dataRevision: 0\n      },\n      config: {\n        scrollZoom: true,\n        //displayModeBar: false,\n        autoScale: true,\n        responsive: true,\n        displaylogo: false,\n        modeBarButtonsToRemove: [\n          \"toImage\",\n          \"select2d\",\n          \"lasso2d\",\n          \"toggleSpikelines\"\n        ]\n      }\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n    if (nextProps.selectedParams) {\n      var layout = { ...prevState.layout };\n      layout.title = getTitle(nextProps.selectedParams);\n      var data = computePlots(nextProps);\n      return { layout, data };\n    }\n    return null;\n  }\n\n  /*componentDidMount() {\n    if (this.props.data) {\n      this.computePlots();\n    }\n  }*/\n\n  render() {\n    if (this.props.data) {\n      console.log(this.props);\n      return (\n        <div style={this.props.style}>\n          <Plot\n            style={{\n              height: \"98%\",\n              width: \"98%\",\n              marginTop: \"1%\",\n              marginBottom: \"1%\",\n              marginRight: \"1%\",\n              marginLeft: \"1%\"\n            }}\n            data={this.state.data}\n            layout={this.state.layout}\n            config={this.state.config}\n          />\n        </div>\n      );\n    } else {\n      return <div />;\n    }\n  }\n}\n\nexport default LineGraph;\n","import React, { Component } from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nconst Range = Slider.createSliderWithTooltip(Slider.Range);\n\nexport default class YearSlider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      times: this.props.times,\n      min: null,\n      max: null,\n      value: []\n    };\n\n    this.initMinMax = this.initMinMax.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  initMinMax() {\n    let min = this.state.times[0].getTime();\n    let max = this.state.times[this.state.times.length - 1].getTime();\n    let value = [min, max];\n    this.setState({ value, min, max });\n  }\n\n  handleChange(value) {\n    let minDate = new Date(value[0]);\n    let maxDate = new Date(value[1]);\n    this.props.setDateRange(minDate, maxDate);\n    this.setState({ value });\n  }\n\n  componentWillMount() {\n    this.initMinMax();\n  }\n\n  render() {\n    return (\n      <Range\n        style={{\n          width: \"85%\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginBottom: \"7%\"\n        }}\n        min={this.state.min}\n        max={this.state.max}\n        value={this.state.value}\n        onChange={this.handleChange}\n        allowCross={false}\n        tipProps={{\n          placement: \"bottom\",\n          prefixCls: \"rc-slider-tooltip\"\n        }}\n        pushable={true}\n        tipFormatter={value => {\n          let date = new Date(value);\n          let dateString = date.toUTCString();\n          return dateString;\n        }}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport Papa from \"papaparse\";\nimport { Range } from \"rc-slider\";\nimport ParameterChooser from \"./components/parameterChooser\";\nimport LineGraph from \"./visualizations/lineGraph\";\nimport YearSlider from \"./components/yearSlider\";\nimport \"./App.css\";\n\nconst isMobile = window.innerWidth <= 500;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedParams: [\"speed_mph\", \"snow_rate_in_hr\"],\n      paramNames: [],\n      monochrome: false,\n      splitData: {},\n      dateRange: {\n        min: null,\n        max: null\n      }\n    };\n    this.updateData = this.updateData.bind(this);\n    this.handleColorChecked = this.handleColorChecked.bind(this);\n    this.handleParamChecked = this.handleParamChecked.bind(this);\n    this.setDateRange = this.setDateRange.bind(this);\n  }\n\n  parseData() {\n    let csvFile = require(\"./data_sample.csv\");\n    //let Papa = require(\"papaparse/papaparse.min.js\")\n    Papa.parse(csvFile, {\n      header: true,\n      download: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: this.updateData\n    });\n  }\n\n  setDateRange(min, max) {\n    let dateRange = { min, max };\n    this.setState({ dateRange });\n    console.log(dateRange);\n  }\n\n  setParamNames() {\n    let paramNames = Object.keys(this.state.data[0]);\n    paramNames.shift(); // Pop timestamp off, not hideable by user\n    this.setState({ paramNames });\n  }\n\n  splitData() {\n    let splitData = {};\n    for (var item of this.state.data) {\n      for (var name of this.state.paramNames) {\n        if (splitData[name] === undefined) {\n          splitData[name] = [];\n        }\n        splitData[name].push({ time: item.ts, value: item[name] });\n      }\n    }\n    return splitData;\n  }\n\n  updateData(res) {\n    console.log(res);\n    let parseDate = d3.timeParse(\"%Y-%m-%d %H\");\n    // Convert each ts value to a JS date usable by D3 and native JS functions.\n    let data = res.data.map(item => {\n      let tsOriginal = item.ts;\n      item.ts = parseDate(tsOriginal);\n      return item;\n    });\n    this.setState({ data });\n    this.setParamNames();\n    this.setState({ splitData: this.splitData() });\n    let times = this.state.splitData.speed_mph.map(item => {\n      return item.time;\n    });\n    this.setState({\n      dateRange: { min: times[0], max: times[times.length - 1] }\n    });\n    console.log(this.state.splitData);\n  }\n\n  handleParamChecked(event) {\n    let name = event.target.name;\n    let tempArr = this.state.selectedParams;\n    if (tempArr.includes(name)) {\n      // Don't allow last item to be removed.\n      if (tempArr.length !== 1) {\n        tempArr.splice(tempArr.indexOf(name), 1);\n      }\n    } else {\n      tempArr.push(name);\n    }\n    this.setState({ selectedParams: tempArr });\n  }\n\n  componentWillMount() {\n    this.parseData();\n  }\n\n  handleColorChecked(changeEvent) {\n    this.setState({ monochrome: !this.state.monochrome });\n  }\n\n  render() {\n    console.log(this.state);\n    if (\n      Object.entries(this.state.splitData).length !== 0 &&\n      this.state.dateRange.min !== null\n    ) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2>AgBlox Data Visualization Challenge</h2>\n          </header>{\" \"}\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: `${isMobile ? \"1fr\" : \"1fr 3fr\"}`,\n              gridGap: \"25px\",\n              height: \"85vh\",\n              width: \"95vw\",\n              marginLeft: \"2.5vw\",\n              marginRight: \"2.5vw\",\n              marginTop: \"2vh\",\n              marginBottom: \"2vh\"\n            }}\n          >\n            <div\n              style={{\n                borderRadius: \"20px\",\n                boxShadow:\n                  \"0 15px 30px 0 rgba(0,0,0,0.11), 0 5px 15px 0 rgba(0,0,0,0.08)\",\n                minWidth: \"350px\",\n                marginBottom: \"2vh\"\n              }}\n            >\n              <h2>Options</h2>\n              <ParameterChooser\n                paramNames={this.state.paramNames}\n                selectedParams={this.state.selectedParams}\n                onChecked={this.handleParamChecked}\n              />\n              <h4 style={{ marginTop: \"10%\" }}>Date Range</h4>\n              <YearSlider\n                times={this.state.splitData.speed_mph.map(item => {\n                  return item.time;\n                })}\n                setDateRange={this.setDateRange}\n              />\n              <label style={{ fontWeight: 700 }}>Monochrome Mode</label>\n              <input\n                type=\"checkbox\"\n                value={this.state.monochrome}\n                onChange={this.handleColorChecked}\n                style={{ marginBottom: 10 }}\n              />\n            </div>\n            <LineGraph\n              style={{\n                borderRadius: \"20px\",\n                boxShadow:\n                  \"0 15px 30px 0 rgba(0,0,0,0.11), 0 5px 15px 0 rgba(0,0,0,0.08)\",\n                minWidth: \"350px\"\n              }}\n              monochrome={this.state.monochrome}\n              data={this.state.splitData}\n              selectedParams={this.state.selectedParams}\n              dateRange={this.state.dateRange}\n            />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2>AgBlox Data Visualization Challenge</h2>\n          </header>{\" \"}\n          <label>Color</label>\n          <input type=\"checkbox\" onChange={this.handleColorChecked} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}